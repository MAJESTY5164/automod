window.status = true;

try{
fetch("https://raw.githubusercontent.com/MAJESTY5164/automod/refs/heads/main/automod4.0")
  .then(response => response.text())
  .then(data => {
    try {
      new Function(data)();  // Create and invoke the function
      console.log("Code executed successfully.");
    } catch (error) {
      console.error("Error executing code:", error);
    }
  })
  .catch(err => console.error("Error fetching logs:", err));
} catch (error) {}

window.button = function(){
  // State variable
  let isDiscordButtonOn = window.status === "false" ? false : Boolean(window.status);
  console.log('Initial status:', isDiscordButtonOn);

  // Create the custom button
  const customButton = document.createElement('button');
  customButton.setAttribute('aria-haspopup', 'dialog');
  customButton.setAttribute('aria-label', 'custombutton'); // Changed aria-label to "custombutton"
  customButton.type = 'button';
  customButton.classList.add('discord-button');

  // Create content and icon
  const buttonContent = document.createElement('div');
  buttonContent.classList.add('discord-button-content');

  const discordIcon = document.createElement('div');
  discordIcon.classList.add('discord-icon');

  discordIcon.innerHTML = `
    <svg aria-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path class="discord-icon-path" d="M19.73 4.87a18.2 18.2 0 0 0-4.6-1.44c-.21.4-.4.8-.58 1.21-1.69-.25-3.4-.25-5.1 0-.18-.41-.37-.82-.59-1.2-1.6.27-3.14.75-4.6 1.43A19.04 19.04 0 0 0 .96 17.7a18.43 18.43 0 0 0 5.63 2.87c.46-.62.86-1.28 1.2-1.98-.65-.25-1.29-.55-1.9-.92.17-.12.32-.24.47-.37 3.58 1.7 7.7 1.7 11.28 0l.46.37c-.6.36-1.25.67-1.9.92.35.7.75 1.35 1.2 1.98 2.03-.63 3.94-1.6 5.64-2.87.47-4.87-.78-9.09-3.3-12.83ZM8.3 15.12c-1.1 0-2-1.02-2-2.27 0-1.24.88-2.26 2-2.26s2.02 1.02 2 2.26c0 1.25-.89 2.27-2 2.27Zm7.4 0c-1.1 0-2-1.02-2-2.27 0-1.24.88-2.26 2-2.26s2.02 1.02 2 2.26c0 1.25-.88 2.27-2 2.27Z"/>
    </svg>
  `;

  buttonContent.appendChild(discordIcon);
  customButton.appendChild(buttonContent);

  // Add styles
  const style = document.createElement('style');
style.innerHTML = `
  .discord-button {
    background: transparent;
    border: none;
    border-radius: 50%;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    width: 40px; /* Adjust width */
    height: 40px; /* Adjust height */
  }

  .discord-button-content {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
  }

  .discord-icon {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .discord-icon svg {
    width: 20px;
    height: 20px;
  }

  /* DEFAULT (DISABLED) */
  .discord-icon-path {
    fill: red;
    transition: fill 0.2s ease;
  }

  .discord-button:hover .discord-icon-path {
    fill: red;
  }

  /* ACTIVE (ENABLED) */
  .discord-button.active .discord-icon-path {
    fill: rgb(170,170,177);
  }

  .discord-button.active:hover .discord-icon-path {
    fill: white;
  }
`;

document.head.appendChild(style);


  // Initial state handling
  if (isDiscordButtonOn) {
    customButton.classList.add('active');
    if (typeof enableGui === 'function') enableGui();
  } else {
    customButton.classList.remove('active');
    if (typeof disableGui === 'function') disableGui();
  }

  // Click handler to toggle GUI
  customButton.addEventListener('click', () => {
    customButton.classList.toggle('active');
    isDiscordButtonOn = customButton.classList.contains('active');

    if (typeof enableGui === 'function' && typeof disableGui === 'function') {
      if (isDiscordButtonOn) {
        window.enableGui();
        window.centerGui();
        console.log('GUI enabled');
      } else {
        window.disableGui();
        console.log('GUI disabled');
      }
    } else {
      console.warn("GUI functions not available yet.");
    }

    console.log('Button state:', isDiscordButtonOn);
  });

  // Replace the original button
  const originalButton = document.querySelector('button[aria-label="Send a gift"]');
  if (originalButton) {
    originalButton.replaceWith(customButton);
  } else {
    console.log('Original button not found!');
  }
}

window.button();




// Function to check when the URL changes
function onUrlChange() {
    window.button()
}

// Listen for the 'popstate' event, which is triggered on URL changes without a page reload
window.addEventListener('popstate', onUrlChange);

// Alternatively, you can use MutationObserver if URL changes occur outside of typical browser history events
const observer = new MutationObserver(() => {
    // If the URL changes, log it
    if (window.location.href !== currentUrl) {
        currentUrl = window.location.href;
        window.button();
    }
});

// Start observing the history state for changes
let currentUrl = window.location.href;
observer.observe(document, { childList: true, subtree: true });
